rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isTeacher() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher';
    }

    // Helper to get the classId assigned to the current teacher (assuming 1:1 for simplicity)
    // This helper might need adjustment if a teacher can have multiple classes.
    // For now, it fetches the classId from the user's document.
    // If a teacher can teach multiple classes, you'd need a different way to check.
    function getTeacherClassId() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.classId;
    }

    // NEW HELPER: Checks if the current authenticated user (teacher OR admin) is assigned to a specific class
    function isAssignedToClass(classId) {
      return isAuthenticated() && get(/databases/$(database)/documents/classes/$(classId)).data.teacherIds.hasAny([request.auth.uid]);
    }


    // --- 1. Users Collection ---
    match /users/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId; // Users can read their own profile
      allow read, create, update, delete: if isAdmin(); // Admins can manage all users
      allow update: if isAuthenticated()
                      && request.auth.uid == userId
                      && request.resource.data.role == resource.data.role; // Self-update, but prevent role change
      // Teachers can create student user profiles
      allow create: if isTeacher()
                     && request.resource.data.role == 'student'
                     && request.resource.data.classId == getTeacherClassId()
                     && request.resource.data.name is string && request.resource.data.name.size() > 0;
      // Teachers can read student user profiles assigned to their class
      allow read: if isTeacher()
                   && resource.data.role == 'student'
                   && resource.data.classId == getTeacherClassId();
    }

    // --- 2. Classes Collection ---
    match /classes/{classId} {
      // Allow read for admins, or teachers/admins assigned to that specific class
      allow read: if isAdmin() || isAssignedToClass(classId);

      // Allow create/update/delete for admins, or update for assigned teachers
      allow create: if isAdmin(); // Only admins can create new classes
      allow update: if isAdmin() || isAssignedToClass(classId); // Admins can update any, assigned teachers can update their own assigned
      allow delete: if isAdmin(); // Only admins can delete classes
    }

    // --- 3. Students Collection ---
    match /students/{studentId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        (isTeacher() && get(/databases/$(database)/documents/students/$(studentId)).data.classId == getTeacherClassId()) ||
        (request.auth.uid == studentId) // Student can read their own profile
      );
      // Create/Update/Delete should be allowed for admins, or teachers for their own class students
      allow create, update: if isAdmin() || (isTeacher() && request.resource.data.classId == getTeacherClassId());
      allow delete: if isAdmin() || (isTeacher() && resource.data.classId == getTeacherClassId());
    }

    // --- 4. Attendance Collection ---
    match /attendance/{attendanceId} {
      // Allow read for admins, or teachers/admins assigned to the class, or student for their own record
      allow read: if isAuthenticated() && (
        isAdmin() ||
        isAssignedToClass(resource.data.classId) || // Assigned teacher or admin can read
        (request.auth.uid == resource.data.studentId) // Student can read their own attendance
      );

      // Allow create/update for admins or teachers/admins assigned to the class
      // Ensure the 'recordedBy' field matches the user performing the action
      allow create, update: if isAuthenticated() && (
        (isAdmin() || isAssignedToClass(request.resource.data.classId)) && // User is admin OR assigned to the class
        (request.auth.uid == request.resource.data.recordedBy) // Ensures user setting 'recordedBy' is themselves
      );
      allow delete: if isAdmin(); // Only admins can delete attendance records
    }
  }
}